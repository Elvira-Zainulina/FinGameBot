from utils import Bot, QuizSequence, UserProgress
from utils.filters import FilterQuiz, FilterRound, FilterNothing, FilterNone
from telegram.ext import CommandHandler, CallbackQueryHandler
from telegram.ext import MessageHandler, Filters
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram import KeyboardButton, ReplyKeyboardMarkup


class FinGameBot(Bot):
    _user_stat = {}  # key - user id, value - user statistic (UserStatistic)
    _quiz_sequence = None
    _round_sequence = None

    _cur_question = 0
    _cur_block = 0

    def __init__(self, bot_token: str):
        super(FinGameBot, self).__init__(bot_token)
        self._quiz_sequence = QuizSequence("data/quiz_data.json")

    def append_handlers(self):
        start_handler = CommandHandler('start', self.start)
        self._dispatcher.add_handler(start_handler)

        quiz_filter = FilterQuiz()
        round_filter = FilterRound()
        non_filter = FilterNothing()
        None_filter = FilterNone()

        msg_quiz_handler = MessageHandler((~None_filter) & quiz_filter, self.quiz_start)
        self._dispatcher.add_handler(msg_quiz_handler)

        msg_round_handler = MessageHandler((~None_filter) & round_filter, self.round)
        self._dispatcher.add_handler(msg_round_handler)

        echo_handler = MessageHandler((~None_filter) & Filters.text & (~Filters.command) & (~non_filter) &
                                      (~quiz_filter) & (~round_filter), self.unknown)
        self._dispatcher.add_handler(echo_handler)

        quiz_handler = CommandHandler('quiz', self.quiz_start)
        self._dispatcher.add_handler(quiz_handler)

        round_handler = CommandHandler('round', self.round)
        self._dispatcher.add_handler(round_handler)

        help_handler = CommandHandler('help', self.help)
        self._dispatcher.add_handler(help_handler)

        image_handler = CommandHandler('image', self.image)
        self._dispatcher.add_handler(image_handler)

        unknown_handler = MessageHandler(Filters.command, self.unknown)
        self._dispatcher.add_handler(unknown_handler)

        self._dispatcher.add_handler(CallbackQueryHandler(self.quiz, pattern='quiz'))
        self._dispatcher.add_handler(CallbackQueryHandler(self.check_answer_action, pattern='answer_\\d'))
        self._dispatcher.add_handler(CallbackQueryHandler(self.end, pattern='end'))

    @staticmethod
    def quiz_keyboard_variants(options: list):
        keyboard = []
        for i in range(len(options)):
            keyboard.append([InlineKeyboardButton(options[i], callback_data=f'answer_{i}')])
        keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data='end')])
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def quiz_start_keyboard():
        keyboard = [[InlineKeyboardButton("–î–∞, –≥–æ—Ç–æ–≤", callback_data='quiz')],
                    [InlineKeyboardButton("–ù–µ—Ç, –Ω–µ –≥–æ—Ç–æ–≤", callback_data='end')]]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def quiz_cont_keyboard():
        keyboard = [[InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É", callback_data='quiz')],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data='end')]]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def quiz_help_keyboard():
        keyboard = [[KeyboardButton("–û–ª–µ–≥, –¥–∞–≤–∞–π –ø–æ–∏–≥—Ä–∞–µ–º –≤ quiz")],
                    [KeyboardButton("–û–ª–µ–≥, —è —Ö–æ—á—É –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –†–∞—É–Ω–¥")],
                    [KeyboardButton("–Ø –Ω–µ —Ö–æ—á—É –∏–≥—Ä–∞—Ç—å.")]]
        return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    @staticmethod
    def quiz_next_keyboard():
        keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data='quiz')],
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data='end')]]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def help(update, context):
        help_msg = "/quiz - –ü–æ–∏–≥—Ä–∞—Ç—å –≤ –∫–≤–∏–∑ —Å –û–ª–µ–≥–æ–º, \n" \
                   "/round - –ü–æ–∏–≥—Ä–∞—Ç—å –≤ –†–∞—É–Ω–¥ —Å –û–ª–µ–≥–æ–º."
        context.bot.send_message(chat_id=update.effective_chat.id, text=help_msg)

    def image(self, update, context):
        img_path = self._quiz_sequence.get_block(3).get_advice_pic()
        context.bot.send_photo(update.effective_chat.id,
                               photo=open(img_path, 'rb'))

    def start(self, update, context):
        cur_user = update.effective_chat
        self._user_stat[cur_user["id"]] = UserProgress(cur_user)
        greeting_username = " "
        if cur_user['username'] is not None:
            greeting_username += "@" + cur_user['username']
        else:
            greeting_username = ""

        hello_msg = f"–ü—Ä–∏–≤–µ—Ç{greeting_username}!\n" \
                    "–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –û–ª–µ–≥. " \
                    "–Ø –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ " \
                    "–ø–æ–∫–∞–∂—É, –∫–∞–∫ —Ç—ã –∑–∞–ø—Ä–æ—Å—Ç–æ —Å–º–æ–∂–µ—à—å –ø—Ä–∏–º–µ–Ω—è—Ç—å –∏—Ö –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ."
        context.bot.send_message(chat_id=update.effective_chat.id, text=hello_msg,
                                 reply_markup=self.quiz_help_keyboard())

    def unknown(self, update, context):
        msg = "–î–∞–≤–∞–π –ª—É—á—à–µ –ø–æ–∏–≥—Ä–∞–µ–º –≤ –∫–≤–∏–∑ –∏–ª–∏ –†–∞—É–Ω–¥?"
        context.bot.send_message(chat_id=update.effective_chat.id, text=msg,
                                 reply_markup=self.quiz_help_keyboard())

    @staticmethod
    def round(update, context):
        context.bot.send_message(chat_id=update.effective_chat.id, text="Not implemented error")

    def quiz_start(self, update, context):
        update.message.reply_text("–¢—ã –≥–æ—Ç–æ–≤ –∏—Å–ø—ã—Ç–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã?",
                                  reply_markup=self.quiz_start_keyboard())

    def quiz(self, update, context):
        cur_user = update.effective_chat
        if cur_user["id"] not in self._user_stat.keys():
            self._user_stat[cur_user["id"]] = UserProgress(cur_user)
        else:
            print(self._user_stat[cur_user["id"]].get_username())

        if self._cur_block > self._quiz_sequence.get_sequence_size():
            self._cur_block = 0
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text="–ù–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç. –ì–æ—Ç–æ–≤ –ª–∏ —Ç—ã –∫ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—é?",
                                     reply_markup=self.quiz_start_keyboard())
            return

        question_obj = self._quiz_sequence.get_question(self._cur_block, self._cur_question)
        question = question_obj.get_text()
        options = question_obj.get_variants_answers()

        context.bot.send_message(chat_id=update.effective_chat.id, text=question,
                                 reply_markup=self.quiz_keyboard_variants(options))

    def update_cur_position(self, update, context):
        block = self._quiz_sequence.get_block(self._cur_block)
        if self._cur_question < block.get_block_size() - 1:
            self._cur_question += 1
        else:
            advice = block.get_advice()
            picture = block.get_advice_pic()
            context.bot.send_message(chat_id=update.effective_chat.id,
                                     text=advice)
            context.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo=open(picture, 'rb'),
                                   reply_markup=self.quiz_cont_keyboard())
            self._cur_block += 1
            self._cur_question = 0

    def generate_message_answer(self, cur_answer: int):
        question_obj = self._quiz_sequence.get_question(self._cur_block, self._cur_question)
        message = question_obj.get_text() + '\n'
        true_answers = question_obj.get_true()
        ans = question_obj.get_variants_answers()[cur_answer]
        exp = question_obj.get_variants_explanation()[cur_answer]
        is_correct = False
        if (cur_answer + 1) in true_answers:
            message += f'\n–í–∞—à –æ—Ç–≤–µ—Ç: {ans}. \n\n üéâ üéâ üéâ–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ! {exp}'
            is_correct = True
        else:
            message += f'\nüôà –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç "{ans}" –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. \n\n' + f'–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {exp}'
        return message, is_correct

    def check_answer_action(self, update, context):
        cur_answer_num = int(str(update['callback_query']['data']).split("answer_")[-1])
        answer, is_correct = self.generate_message_answer(cur_answer_num)
        self.print_question_answer(update, context, answer)

    def print_question_answer(self, update, context, answer):
        self.update_cur_position(update, context)
        query = update.callback_query
        context.bot.edit_message_text(chat_id=query.message.chat_id,
                                      message_id=query.message.message_id,
                                      text=answer,
                                      reply_markup=self.quiz_next_keyboard())

    def end(self, update, context):
        self._cur_question = 0
        query = update.callback_query
        context.bot.send_message(chat_id=query.message.chat_id,
                                 text="–ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤–æ–π –∏–≥—Ä—ã")
